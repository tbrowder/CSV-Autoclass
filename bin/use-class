#!/usr/bin/env raku

use CSV-Autoclass;

my $prog = $*PROGRAM.basename;
if not @*ARGS.elems {
    print qq:to/HERE/;
    Usage:
      $prog class=<class name> <class CSV data file> [...opts]
          OR
      $prog go [...opts]

      Use the 'help' option for detailed instructions.

    Options:
      dir=<directory to start search from> (default is '.')
      help
      debug
    HERE

    exit;
}

my $debug = 0;
my $go    = 0;
my $dir   = '.';
my $csv-file;
my $class-name; # abc.csv => Abc [<-- Abc is the cname (class name)]

for @*ARGS {
    when /:i ^ '-'? h/ {
        use-class-help $prog, :$eg-class, :$eg-data;
        exit;
    }
    if $_.IO.r {
        $csv-file = $_;
        next;
    }
    when /:i class '=' (\S+) / {
        $class-name = ~$0;
    }
    when /:i data '=' (\S+) / {
        $csv-file = ~$0;
    }
    when /:i dir '=' (\S+) / {
        $dir = ~$0;
        unless $dir.IO.d {
            die "FATAL: Directory '$dir' does not exist";
        }
    }
    when /:i ^g/ { $go    = 1 }
    when /:i ^d/ { $debug = 1 }
    default { die "FATAL: Unknown arg '$_'" }
}

if not $csv-file.defined {
    $csv-file   = $eg-data;
    $class-name = "Person";
}

if (try require ::($class-name)) === Nil {
    die "FATAL: Failed to load module '$class-name'!";
}

say "Reading the CSV file and getting one $class-name object per data line...";
my @objs = get-csv-class-data :$class-name, :$csv-file, :$debug;
#say "temp exit with {@objs.elems} objects"; exit;

say "Showing each object:";
for @objs.kv -> $i, $o {
    say "Record $i:";
    for $o.^attributes -> $a {
        my $v = $a.get_value($o);
        my $nam = $a.name.comb[2..*].join("");
        say "  field: {$nam}, value: '$v'";
    };
}

#### subroutines ####
sub get-csv-class-data(
    :$class-name = 'Person'; 
    :$csv-file   = 'persons.csv', 
    :$dir = '.',
    :$debug,
     --> List
) is export {

    use CSV::Parser;
    use File::Find;

    my $basename = $csv-file.IO.basename;
    my $ext      = $csv-file.IO.extension.lc;

    use lib "$dir";

    if (try require ::($class-name)) === Nil {
        die "FATAL: Failed to load module '$class-name'!";
    }

    if $debug {
        note qq:to/HERE/;
        DEBUG from 'get-csv-class-data':
          \$csv-file = '$csv-file'
          \$dir  = '$dir'
          \$basename  = '$basename'
          \$extension = '$ext'
        HERE
        #note "Exiting..."; exit;
    }

    unless $ext eq 'csv' {
        die "FATAL: Desired CSV data file '$csv-file' has no 'csv' extension";
    }

    my @csv = find :$dir, :type('file'), :name($basename);
    unless @csv.elems {
        die "FATAL: No file '$basename' found in dir '$dir'";
    }
    if $debug {
        note "DEBUG \@csv = '{@csv.raku}'";
    }

    my $fh = open $basename, :r;
    my $parser = CSV::Parser.new: :file_handle($fh);

    my @objs; # list of data class objects
    my @hdrs; # this is the first row of headers in order of appearance:
    ROW: while my %data = %($parser.get_line()) {
        if not @hdrs.elems {
            # this is the header row
            my @idx = %data.keys.sort;
            for 0..^@idx.elems {
                my $val = %data{$_}.trim;
                @hdrs.push: $val;
            }
            next ROW
        }

        # this is a data header row
        my @idx = %data.keys.sort;
        my @data;
        for 0..^@idx.elems {
            my $val = %data{$_}.trim;
            @data.push: $val;
        }
        if $debug {
            note "DEBUG: data {@data.raku}";
        }
        my $obj = ::($class-name).new(|@data);
        if $debug {
            note "DEBUG: object {$obj.last}";
            note $obj.last;
        }
        @objs.push: $obj;
    }
    $fh.close;

    if $debug {
        say "Headers:";
        my $h = @hdrs.join('|');
        say $h;
    }

    @objs;
}
